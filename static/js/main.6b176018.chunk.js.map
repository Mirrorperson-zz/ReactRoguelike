{"version":3,"sources":["components/Tile.js","Utility.js","components/Agent.js","components/Events.js","components/Combat.js","WorldGeneration/MapGeneration.js","WorldGeneration/AgentsGeneration.js","components/Map.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Tile","props","tile","tileType","react_default","a","createElement","className","id","GetPlayerAgentId","PondHasTile","pond","map","pondTile","includes","GetTile","state","row","column","GetAgentIndexWithId","agents","findIndex","agent","GetAgentWithId","find","ConsoleLogTest","test","message","console","log","RollRandom","max","min","arguments","length","undefined","Math","floor","random","UpdateStateWithAgents","newTilesStates","newAgents","newTilesAgentsStates","Object","toConsumableArray","x","forEach","agentPosition","position","Agent","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","UpdateAgent","newPlayerPosition","PerformDeath","agentIndex","splice","AgentsData","type","startPosition","str","agi","dex","wis","int","Component","HandleEvent","agentId","oldAgentPosition","eventKey","assign","mapEdgeGap","playerPosEdgeGap","newAgentPosition","oldPosition","columnsNum","rowsNum","newPosition","GetNewAgentPosition","columns","rows","enemyAgent","tilesAgentsStates","GetTargetAgent","enemy","EvaluateCombat","tilesStates","HandleAgentEvents","newState","activeAgent","previousUpperLimit","rollUpperLimits","i","push","activeAgentRoll","_i","_Object$entries","entries","_ref3","_ref2","slicedToArray","index","GetActiveAgent","GetNewState","tileOccuranceLimits","j","randomRoll","tileTypes","grass","rock","tree","water","allPonds","FindPonds","ResizePonds","pondsEmpty","newPond","newPonds","inPond","pondIndex","newPondArray","checkTileRow","checkTileColumn","newPondTile","AddAdjecentWaterTiles","pondArray","condenseCurrent","condenseLimit","_loop","_expandCount","expandCount","InitializeAgents","agentsCounter","player","CreateAgent","rowi","columnTile","columni","shouldCreateAgent","lodashLang","isEqual","agentToCreate","keys","agentName","filter","window","jQuery","$","Map","agentCounter","ponds","playersTurn","handleKeyPress","event","oldPlayerPosition","key","_","setState","newTilesStateWithAgents","objectSpread","activeAgentId","absolutePosition","moveDirection","thisAppMap","stateActiveAgentIdAndDirection","movedCss","_stateActiveAgentIdAn","concat","clone","prop","css","left","top","appendTo","parent","addClass","animate","remove","_this2","tabIndex","onKeyDown","tileTypeOrAgentId","colIndex","components_Tile","App","handleSubmit","preventDefault","height","width","invalidSize","app","components_Map","ReactDom","render","document","getElementById","setSize","handleChange","target","value","onSubmit","onChange","Boolean","location","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.6b176018.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Tile = (props) => {\r\n  let tile;\r\n\r\n  switch (props.tileType) {\r\n    case 0:\r\n      tile = <div className=\"tile grass\" />;\r\n      break;\r\n    case 1:\r\n      tile = <div className=\"tile rock\" />;\r\n      break;\r\n    case 2:\r\n      tile = <div className=\"tile tree\" />;\r\n      break;\r\n    case 3:\r\n      tile = <div className=\"tile water\" />;\r\n      break;\r\n    default:\r\n      tile = <div id={props.id} className={props.tileType} />;\r\n  }\r\n\r\n  return tile;\r\n};\r\n\r\nexport default Tile;\r\n","import AgentsData from './AgentsContent.json';\r\n\r\nconst GetPlayerAgentId = () => 'a0';\r\n\r\nconst PondHasTile = (pond, tile) => {\r\n  let arrayChecks = pond.map(function(pondTile) {\r\n    // Check if each tile in pond is same as tile\r\n    if (pondTile[0] === tile[0] && pondTile[1] === tile[1]) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // if any tile matches return true\r\n  return arrayChecks.includes(true);\r\n};\r\n\r\nconst GetTile = (state, row, column) => {\r\n  return state[row][column];\r\n};\r\n\r\nconst GetAgentIndexWithId = (id, agents) => {\r\n  return agents.findIndex((agent) => {\r\n    return agent.state.id === id;\r\n  });\r\n};\r\n\r\nconst GetAgentWithId = (id, agents) => {\r\n  return agents.find((agent) => {\r\n    return agent.state.id === id;\r\n  });\r\n};\r\n\r\nconst GetTargetAgent = (position, agents, state) => {\r\n  let agentId = state.tilesAgentsStates[position[0]][position[1]];\r\n  return GetAgentWithId(agentId, agents);\r\n};\r\n\r\nconst GetAgentTypes = () => {\r\n  return Object.keys(AgentsData);\r\n};\r\n\r\nconst ConsoleLogTest = (test, message) => {\r\n  if (test) {\r\n    console.log(message);\r\n  }\r\n};\r\n\r\n// does not work with negative numbers\r\nconst RollRandom = (max, min = 1) => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\nconst UpdateStateWithAgents = (newTilesStates, newAgents) => {\r\n  let newTilesAgentsStates = [...newTilesStates.map((x) => [...x])];\r\n\r\n  newAgents.forEach((agent) => {\r\n    let agentPosition = agent.state.position;\r\n    newTilesAgentsStates[agentPosition[0]][agentPosition[1]] = agent.state.id;\r\n  });\r\n\r\n  return newTilesAgentsStates;\r\n};\r\n\r\nexport {\r\n  PondHasTile,\r\n  GetTile,\r\n  GetAgentWithId,\r\n  GetAgentTypes,\r\n  ConsoleLogTest,\r\n  RollRandom,\r\n  GetPlayerAgentId,\r\n  GetTargetAgent,\r\n  GetAgentIndexWithId,\r\n  UpdateStateWithAgents\r\n};\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\nimport AgentsData from '../AgentsContent.json';\r\nimport { GetAgentIndexWithId } from '../Utility';\r\n\r\nclass Agent extends Component {\r\n  state = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let position = props.position\r\n      ? props.position\r\n      : AgentsData[props.type].startPosition;\r\n\r\n    this.state = {\r\n      id: props.id,\r\n      type: props.type,\r\n      str: AgentsData[props.type].str,\r\n      agi: AgentsData[props.type].agi,\r\n      dex: AgentsData[props.type].dex,\r\n      wis: AgentsData[props.type].wis,\r\n      int: AgentsData[props.type].int,\r\n      position: position\r\n    };\r\n  }\r\n\r\n  UpdateAgent = (newPlayerPosition) => {\r\n    this.state.position = newPlayerPosition;\r\n  };\r\n\r\n  PerformDeath = (agents) => {\r\n    let agentIndex = GetAgentIndexWithId(this.state.id, agents);\r\n    agents.splice(agentIndex, 1);\r\n  };\r\n}\r\n\r\nexport default Agent;\r\n","import {\r\n  GetAgentWithId,\r\n  ConsoleLogTest,\r\n  RollRandom,\r\n  GetTargetAgent,\r\n  UpdateStateWithAgents\r\n} from '../Utility';\r\nimport { EvaluateCombat } from '../components/Combat';\r\nimport _ from 'lodash';\r\n\r\nconst GetNewAgentPosition = (\r\n  oldPosition,\r\n  eventKey,\r\n  columnsNum,\r\n  rowsNum,\r\n  mapEdgeGap\r\n) => {\r\n  let newPosition;\r\n\r\n  switch (eventKey) {\r\n    case 'ArrowLeft':\r\n      newPosition = [oldPosition[0] - 1, oldPosition[1]];\r\n      break;\r\n    case 'ArrowRight':\r\n      newPosition = [oldPosition[0] + 1, oldPosition[1]];\r\n      break;\r\n    case 'ArrowUp':\r\n      newPosition = [oldPosition[0], oldPosition[1] - 1];\r\n      break;\r\n    case 'ArrowDown':\r\n      newPosition = [oldPosition[0], oldPosition[1] + 1];\r\n      break;\r\n    default:\r\n      newPosition = oldPosition;\r\n  }\r\n\r\n  // to do: enemies cant leave map atm because it tries to find\r\n  // what tile the the position is in agent.UpdateAgent() and\r\n  // try to access index out of range of array\r\n\r\n  // check boundaries - leaving map\r\n  if (\r\n    newPosition[0] < mapEdgeGap ||\r\n    newPosition[0] >= columnsNum - mapEdgeGap ||\r\n    newPosition[1] < mapEdgeGap ||\r\n    newPosition[1] >= rowsNum - mapEdgeGap\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  return newPosition;\r\n};\r\n\r\nconst HandleEvent = (agentId, oldAgentPosition, eventKey, state) => {\r\n  // check keys\r\n  ConsoleLogTest(state.test, 'key pressed ' + eventKey);\r\n\r\n  let newAgents = state.agents.map((a) => Object.assign({}, a));\r\n  let agent = GetAgentWithId(agentId, newAgents);\r\n\r\n  let mapEdgeGap = agent.state.type === 'player' ? state.playerPosEdgeGap : 0;\r\n\r\n  let newAgentPosition = GetNewAgentPosition(\r\n    oldAgentPosition,\r\n    eventKey,\r\n    state.columns,\r\n    state.rows,\r\n    mapEdgeGap,\r\n    agent.state.type\r\n  );\r\n\r\n  // invalid movement outside of boundary\r\n  if (typeof newAgentPosition === 'undefined') return;\r\n\r\n  // Update agents with deaths and position changes\r\n  let enemyAgent = GetTargetAgent(newAgentPosition, newAgents, state);\r\n  if (enemyAgent) {\r\n    EvaluateCombat(agent, enemyAgent, newAgents);\r\n  }\r\n\r\n  agent.UpdateAgent(newAgentPosition);\r\n  let newTilesAgentsStates = UpdateStateWithAgents(\r\n    state.tilesStates,\r\n    newAgents\r\n  );\r\n\r\n  return {\r\n    agents: newAgents,\r\n    tilesAgentsStates: newTilesAgentsStates // then move player\r\n  };\r\n};\r\n\r\nconst GetActiveAgent = (agents) => {\r\n  let rollUpperLimits = [];\r\n  let previousUpperLimit;\r\n\r\n  agents.forEach((a, i) => {\r\n    previousUpperLimit = i === 0 ? 0 : rollUpperLimits[i - 1];\r\n    rollUpperLimits.push(a.state.agi + RollRandom(10) + previousUpperLimit);\r\n  });\r\n\r\n  // Roll up to max of sum\r\n  let activeAgentRoll = RollRandom(rollUpperLimits[rollUpperLimits.length - 1]);\r\n\r\n  for (const [index, limit] of Object.entries(rollUpperLimits)) {\r\n    if (activeAgentRoll < limit) {\r\n      return agents[index];\r\n    }\r\n  }\r\n};\r\n\r\nconst HandleAgentEvents = (state) => {\r\n  let activeAgent = GetActiveAgent(state.agents);\r\n\r\n  if (activeAgent.state.type === 'player') {\r\n    return null;\r\n  }\r\n\r\n  let newState;\r\n  let directionRoll;\r\n  let eventKey;\r\n\r\n  while (newState === undefined) {\r\n    // Todo make decision making smarter\r\n    // may need to move to agent class if quite large\r\n    directionRoll = RollRandom(4);\r\n\r\n    switch (directionRoll) {\r\n      case 1:\r\n        eventKey = 'ArrowLeft';\r\n        break;\r\n      case 2:\r\n        eventKey = 'ArrowUp';\r\n        break;\r\n      case 3:\r\n        eventKey = 'ArrowRight';\r\n        break;\r\n      case 4:\r\n        eventKey = 'ArrowDown';\r\n        break;\r\n    }\r\n\r\n    newState = HandleEvent(\r\n      activeAgent.state.id,\r\n      activeAgent.state.position,\r\n      eventKey,\r\n      state\r\n    );\r\n  }\r\n\r\n  return [newState, activeAgent.state.id, eventKey];\r\n};\r\n\r\nexport { GetNewAgentPosition, GetActiveAgent, HandleEvent, HandleAgentEvents };\r\n","const EvaluateCombat = (agent, enemy, newAgents) => {\r\n  if (agent.state.str > enemy.state.str) {\r\n    agent.state.str -= enemy.state.str;\r\n\r\n    enemy.PerformDeath(newAgents);\r\n\r\n    return agent;\r\n  } else {\r\n    agent.PerformDeath(newAgents);\r\n\r\n    enemy.state.str -= agent.state.str;\r\n    if (enemy.state.str <= 0) {\r\n      enemy.PerformDeath(newAgents);\r\n    }\r\n\r\n    return null;\r\n  }\r\n};\r\n\r\nconst UpdateAgentsTilesStatesAfterCombat = (newTilesStates, newAgents) => {};\r\n\r\nexport { EvaluateCombat };\r\n","import { PondHasTile, GetTile, ConsoleLogTest, RollRandom } from '../Utility';\r\n\r\nconst GetNewState = (props, state, tileOccuranceLimits, test = false) => {\r\n  let newState = [];\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    newState.push([]);\r\n  }\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    for (let j = 0; j < props.columns; j++) {\r\n      let randomRoll = RollRandom(100);\r\n\r\n      if (\r\n        randomRoll >= tileOccuranceLimits[0] &&\r\n        randomRoll < tileOccuranceLimits[1]\r\n      ) {\r\n        newState[i].push(state.tileTypes.grass);\r\n      } else if (\r\n        randomRoll >= tileOccuranceLimits[1] &&\r\n        randomRoll < tileOccuranceLimits[2]\r\n      ) {\r\n        newState[i].push(state.tileTypes.rock);\r\n      } else if (\r\n        randomRoll >= tileOccuranceLimits[2] &&\r\n        randomRoll < tileOccuranceLimits[3]\r\n      ) {\r\n        newState[i].push(state.tileTypes.tree);\r\n      } else if (\r\n        randomRoll >= tileOccuranceLimits[3] &&\r\n        randomRoll < tileOccuranceLimits[4]\r\n      ) {\r\n        newState[i].push(state.tileTypes.water);\r\n      }\r\n    }\r\n  }\r\n\r\n  let allPonds = FindPonds(props, state, newState, newState);\r\n  ResizePonds(state, allPonds, newState);\r\n  ConsoleLogTest(test, allPonds);\r\n\r\n  return newState;\r\n};\r\n\r\nconst FindPonds = (props, state, allPonds, newState) => {\r\n  let newPonds = [];\r\n  let pondsEmpty;\r\n  let newPond;\r\n\r\n  for (let i = 0; i < props.rows; i++) {\r\n    for (let j = 0; j < props.columns; j++) {\r\n      if (allPonds[i][j] === state.tileTypes.water) {\r\n        pondsEmpty = !newPonds.length > 0;\r\n\r\n        // Check if any registered ponds exist\r\n        if (!pondsEmpty) {\r\n          // Check if tile is alread in a registered pond\r\n          let inPond = [];\r\n          for (let pondIndex = 0; pondIndex < newPonds.length; pondIndex++) {\r\n            inPond.push(PondHasTile(newPonds[pondIndex], [i, j]));\r\n          }\r\n\r\n          // If tile not in any existing ponds newPond is true\r\n          newPond = !inPond.includes(true);\r\n        }\r\n\r\n        // If no ponds exist or tile is of new pond\r\n        if (pondsEmpty || newPond) {\r\n          // Add new pond, first tile\r\n          let newPondArray = [[i, j]];\r\n          let checkTileRow;\r\n          let checkTileColumn;\r\n\r\n          // Check each adjecent tile is water, pushing new tiles into newPond\r\n          for (\r\n            let newPondTile = 0;\r\n            newPondTile < newPondArray.length;\r\n            newPondTile++\r\n          ) {\r\n            checkTileRow = newPondArray[newPondTile][0];\r\n            checkTileColumn = newPondArray[newPondTile][1];\r\n\r\n            //  Limit Tiles Check\r\n            if (newPondTile < 10) {\r\n              AddAdjecentWaterTiles(\r\n                state,\r\n                newState,\r\n                checkTileRow,\r\n                checkTileColumn,\r\n                newPondArray\r\n              );\r\n            } else {\r\n              ConsoleLogTest(state.test, 'Error - newPondTile >= 10');\r\n            }\r\n          }\r\n\r\n          newPonds.push(newPondArray);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return newPonds;\r\n};\r\n\r\nconst AddAdjecentWaterTiles = (state, newState, row, column, pondArray) => {\r\n  // tile above unless at edge\r\n  if (\r\n    row !== 0 &&\r\n    GetTile(newState, row - 1, column) === state.tileTypes.water\r\n  ) {\r\n    // Check it's not a tile already added\r\n    if (!PondHasTile(pondArray, [row - 1, column])) {\r\n      pondArray.push([row - 1, column]);\r\n    }\r\n  }\r\n\r\n  // tile below unless at edge\r\n  if (\r\n    row !== state.rows - 1 &&\r\n    GetTile(newState, row + 1, column) === state.tileTypes.water\r\n  ) {\r\n    // Check it's not a tile already added\r\n    if (!PondHasTile(pondArray, [row + 1, column])) {\r\n      pondArray.push([row + 1, column]);\r\n    }\r\n  }\r\n\r\n  // tile left unless at edge\r\n  if (\r\n    column !== 0 &&\r\n    GetTile(newState, row, column - 1) === state.tileTypes.water\r\n  ) {\r\n    // Check it's not a tile already added\r\n    if (!PondHasTile(pondArray, [row, column - 1])) {\r\n      pondArray.push([row, column - 1]);\r\n    }\r\n  }\r\n\r\n  // tile right unless at edge\r\n  if (\r\n    column !== state.columns - 1 &&\r\n    GetTile(newState, row, column + 1) === state.tileTypes.water\r\n  ) {\r\n    // Check it's not a tile already added\r\n    if (!PondHasTile(pondArray, [row, column + 1])) {\r\n      pondArray.push([row, column + 1]);\r\n    }\r\n  }\r\n};\r\n\r\nconst ResizePonds = (state, allPonds, newState) => {\r\n  let condenseCurrent = 0;\r\n  let condenseLimit = state.condenseLimit;\r\n  let water = state.tileTypes.water;\r\n  let rows = state.rows;\r\n\r\n  return allPonds.map(function(pond) {\r\n    condenseCurrent = Math.floor(Math.random() * condenseLimit - 1) + 1;\r\n\r\n    // if only one tile in pond then resize with condenseCurrent\r\n    if (pond.length < 3) {\r\n      for (let expandCount = 0; expandCount < condenseCurrent; expandCount++) {\r\n        pond.map(function(pondTile) {\r\n          if (\r\n            pondTile[0] !== 0 &&\r\n            newState[pondTile[0] - 1][pondTile[1]] !== water &&\r\n            expandCount < condenseCurrent\r\n          ) {\r\n            newState[pondTile[0] - 1][pondTile[1]] = water;\r\n            expandCount++;\r\n          }\r\n\r\n          if (\r\n            pondTile[0] !== rows - 1 &&\r\n            newState[pondTile[0] + 1][pondTile[1]] !== water &&\r\n            expandCount < condenseCurrent\r\n          ) {\r\n            newState[pondTile[0] + 1][pondTile[1]] = water;\r\n            expandCount++;\r\n          }\r\n\r\n          if (\r\n            pondTile[1] !== 0 &&\r\n            newState[pondTile[0]][pondTile[1] - 1] !== water &&\r\n            expandCount < condenseCurrent\r\n          ) {\r\n            newState[pondTile[0]][pondTile[1] - 1] = water;\r\n            expandCount++;\r\n          }\r\n\r\n          if (\r\n            pondTile[1] !== rows - 1 &&\r\n            newState[pondTile[0]][pondTile[1] + 1] !== water &&\r\n            expandCount < condenseCurrent\r\n          ) {\r\n            newState[pondTile[0]][pondTile[1] + 1] = water;\r\n            expandCount++;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexport { ResizePonds, FindPonds, GetNewState };\r\n","import Agent from '../components/Agent';\r\nimport {\r\n  GetAgentWithId,\r\n  GetAgentTypes,\r\n  ConsoleLogTest,\r\n  RollRandom\r\n} from '../Utility';\r\nimport AgentsData from '../AgentsContent.json';\r\nimport lodashLang from 'lodash/lang';\r\n\r\nconst InitializeAgents = (state, newTilesStates) => {\r\n  let newAgents = [...state.agents];\r\n  let agentsCounter = 0;\r\n\r\n  let player = CreateAgent('a' + agentsCounter, 'player');\r\n  newAgents.push(player);\r\n  agentsCounter++;\r\n\r\n  newTilesStates.forEach((row, rowi) => {\r\n    row.forEach((columnTile, columni) => {\r\n      // Roll about 10% for if there is an agent in tile\r\n      let shouldCreateAgent = RollRandom(100) < 10 ? true : false;\r\n\r\n      if (lodashLang.isEqual(player.state.position, [rowi, columni])) {\r\n        shouldCreateAgent = false;\r\n      }\r\n\r\n      if (shouldCreateAgent) {\r\n        // Roll another for what agent it should be, chances depending on tile type\r\n        let agentToCreate = RollRandom(Object.keys(AgentsData).length - 1, 1);\r\n\r\n        // Use Switch to vary changes depending on tile type - WIP\r\n        switch (columnTile) {\r\n          case state.tileTypes.grass:\r\n            break;\r\n          case state.tileTypes.rock:\r\n            break;\r\n          case state.tileTypes.tree:\r\n            break;\r\n          case state.tileTypes.water:\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        // Get key/name of agentToCreate from AgentsData after removing player\r\n        let agentName = Object.keys(AgentsData).filter(\r\n          (agentName) => agentName !== 'player'\r\n        )[agentToCreate];\r\n\r\n        newAgents.push(\r\n          CreateAgent('a' + agentsCounter, agentName, [rowi, columni])\r\n        );\r\n        agentsCounter++;\r\n      }\r\n    });\r\n  });\r\n\r\n  ConsoleLogTest(state.test, GetAgentTypes());\r\n\r\n  return newAgents;\r\n};\r\n\r\nconst CreateAgent = (id, type, position = null) => {\r\n  return new Agent({ id, type, position });\r\n};\r\n\r\nexport { CreateAgent, InitializeAgents };\r\n","import React, { Component } from 'react';\r\nimport Tile from './Tile';\r\nimport Agent from './Agent';\r\nimport { HandleEvent, HandleAgentEvents } from './Events';\r\nimport { GetNewState } from '../WorldGeneration/MapGeneration';\r\nimport { InitializeAgents } from '../WorldGeneration/AgentsGeneration';\r\nimport {\r\n  GetPlayerAgentId,\r\n  GetAgentWithId,\r\n  ConsoleLogTest,\r\n  UpdateStateWithAgents\r\n} from '../Utility';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nwindow.jQuery = window.$ = $;\r\n\r\nclass Map extends Component {\r\n  state = {\r\n    test: this.props.test,\r\n    agentCounter: 0,\r\n    columns: this.props.columns,\r\n    rows: this.props.rows,\r\n    tilesStates: [[]],\r\n    tilesAgentsStates: [[]],\r\n    tileTypes: {\r\n      grass: 0,\r\n      rock: 1,\r\n      tree: 2,\r\n      water: 3\r\n    },\r\n    tileOccuranceLimits: [0, 60, 75, 85, 100],\r\n    ponds: [],\r\n    condenseLimit: 3,\r\n    agents: [],\r\n    playerPosEdgeGap: 2,\r\n    playersTurn: true\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let newTilesStates = GetNewState(\r\n      props,\r\n      this.state,\r\n      this.state.tileOccuranceLimits\r\n    );\r\n    let newAgents = InitializeAgents(this.state, newTilesStates);\r\n    let newTilesStateWithAgents = UpdateStateWithAgents(\r\n      newTilesStates,\r\n      newAgents\r\n    );\r\n\r\n    this.state = {\r\n      ...this.state,\r\n      agents: newAgents,\r\n      tilesStates: newTilesStates,\r\n      tilesAgentsStates: newTilesStateWithAgents,\r\n      agentCounter: this.state.agentCounter + newAgents.length\r\n    };\r\n  }\r\n\r\n  // movement controls\r\n  handleKeyPress = (event) => {\r\n    // discard input\r\n    if (!this.state.playersTurn) {\r\n      return;\r\n    }\r\n\r\n    let player = GetAgentWithId(GetPlayerAgentId(), this.state.agents);\r\n    let oldPlayerPosition = [...player.state.position];\r\n\r\n    let newState = HandleEvent(\r\n      GetPlayerAgentId(),\r\n      oldPlayerPosition,\r\n      event.key,\r\n      this.state\r\n    );\r\n\r\n    if (!_.isEqual(player.state.position, oldPlayerPosition)) {\r\n      this.setState((state) => ({\r\n        agents: newState.agents,\r\n        tilesAgentsStates: newState.tilesAgentsStates,\r\n        playersTurn: false\r\n      }));\r\n    }\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    // player's turn handled by handleKeyPress\r\n    if (this.state.playersTurn) {\r\n      return;\r\n    }\r\n\r\n    let thisAppMap = this,\r\n      newState,\r\n      activeAgentId,\r\n      absolutePosition,\r\n      moveDirection,\r\n      tileDimention = 36;\r\n\r\n    let stateActiveAgentIdAndDirection = HandleAgentEvents(this.state);\r\n\r\n    if (stateActiveAgentIdAndDirection === null) {\r\n      // players turn next\r\n      this.setState((state) => ({ playersTurn: true }));\r\n      return;\r\n    } else {\r\n      [newState, activeAgentId, moveDirection] = stateActiveAgentIdAndDirection;\r\n    }\r\n\r\n    // animation start\r\n    var animateAgent = $(`#${activeAgentId}`);\r\n    absolutePosition = animateAgent.position();\r\n\r\n    // Cannot read property 'left' of undefined - absolutePosition occur if\r\n    // original tile is not on dom because of collison - if combat system were\r\n    // in place agent would be removed so it couldn't move if it wasnt in the dom\r\n    $(`#${activeAgentId}`)\r\n      .clone()\r\n      .prop('id', `${activeAgentId}Clone`)\r\n      .css({\r\n        position: 'absolute',\r\n        left: absolutePosition.left,\r\n        top: absolutePosition.top\r\n      })\r\n      .appendTo($(`#${activeAgentId}`).parent());\r\n\r\n    $(`#${activeAgentId}`).addClass('tile-clone');\r\n\r\n    let movedCss;\r\n    switch (moveDirection) {\r\n      case 'ArrowLeft':\r\n        movedCss = { left: absolutePosition.left - tileDimention };\r\n        break;\r\n      case 'ArrowUp':\r\n        movedCss = { top: absolutePosition.top - tileDimention };\r\n        break;\r\n      case 'ArrowRight':\r\n        movedCss = { left: absolutePosition.left + tileDimention };\r\n        break;\r\n      case 'ArrowDown':\r\n        movedCss = { top: absolutePosition.top + tileDimention };\r\n        break;\r\n    }\r\n\r\n    $(`#${activeAgentId}Clone`).animate(movedCss, 1000, () => {\r\n      // remove clones update state\r\n      $(`div[id$=Clone]`).remove();\r\n      thisAppMap.setState((state) => ({\r\n        agents: newState.agents,\r\n        tilesAgentsStates: newState.tilesAgentsStates\r\n      }));\r\n    });\r\n  }\r\n\r\n  render() {\r\n    ConsoleLogTest(this.state.test, this.state.tilesAgentsStates);\r\n    return (\r\n      <div tabIndex=\"0\" onKeyDown={this.handleKeyPress}>\r\n        {this.state.tilesAgentsStates.map((rows, index) => (\r\n          <div key={index}>\r\n            {this.state.tilesAgentsStates[index].map(\r\n              (tileTypeOrAgentId, colIndex) => (\r\n                <Tile\r\n                  id={tileTypeOrAgentId}\r\n                  tileType={\r\n                    tileTypeOrAgentId[0] === 'a' // is agent\r\n                      ? 'tile ' +\r\n                        GetAgentWithId(tileTypeOrAgentId, this.state.agents)\r\n                          .state.type\r\n                      : tileTypeOrAgentId\r\n                  }\r\n                  agent={GetAgentWithId(tileTypeOrAgentId, this.state.agents)}\r\n                  key={index * this.state.rows + colIndex}\r\n                  test={this.state.test}\r\n                />\r\n              )\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport Map from './components/Map';\r\nimport './App.css';\r\nimport './Game.css';\r\nimport ReactDom from 'react-dom';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      width: 10,\r\n      height: 10,\r\n      setSize: true,\r\n      invalidSize: false\r\n    };\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // max size 20, min size 7\r\n    if (\r\n      this.state.height > 20 ||\r\n      this.state.width > 20 ||\r\n      this.state.height < 7 ||\r\n      this.state.width < 7\r\n    ) {\r\n      this.setState({ invalidSize: true });\r\n      return;\r\n    }\r\n\r\n    const app = (\r\n      // How many rows there are determines heigt, columns determines width\r\n      <Map rows={this.state.height} columns={this.state.width} test={true} />\r\n    );\r\n\r\n    ReactDom.render(app, document.getElementById('App'));\r\n\r\n    this.setState({ setSize: false });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    if (event.target.id === 'width') {\r\n      this.setState({\r\n        width: event.target.value\r\n      });\r\n    } else {\r\n      this.setState({\r\n        height: event.target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form\r\n          className={`App-interface ${this.state.setSize ? '' : 'hidden'}`}\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <label>\r\n            Select map size{' '}\r\n            <span className={`${this.state.invalidSize ? 'warning-text' : ''}`}>\r\n              (min: 7, max: 20)\r\n            </span>\r\n          </label>\r\n          <br />\r\n          <label>Height: </label>\r\n          <input\r\n            type=\"int\"\r\n            id=\"height\"\r\n            value={this.state.height}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n\r\n          <label id=\"lblWidth\">Width: </label>\r\n          <input\r\n            type=\"int\"\r\n            id=\"width\"\r\n            value={this.state.width}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n\r\n          <input id=\"Submit\" type=\"submit\" />\r\n        </form>\r\n\r\n        <div id=\"App\" className=\"App\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}